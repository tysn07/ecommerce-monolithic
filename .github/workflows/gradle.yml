# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CD with Gradle

on:
  push:
    branches: [ "dev2" ]
  pull_request:
    branches: [ "dev2" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build
      - name: Build with Gradle Wrapper
        run: jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}
             aws_access_key=${{ secrets.AWS_ACCESS_KEY }}
             aws_secret_key=${{ secrets.AWS_SECRET_KEY }}
             ./gradlew build

      # Docker 이미지 Build
      - name: docker image build
        run: docker build  --build-arg jwt_secret_key=${{ secrets.JWT_SECRET_KEY }} 
                           --build-arg aws_access_key=${{ secrets.AWS_ACCESS_KEY }} 
                           --build-arg aws_secret_key=${{ secrets.AWS_SECRET_KEY }} 
                           -t ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-project .

      # DockerHub Login (push 하기 위해)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker hub 로 push
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-project

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: docker pull
        run : docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-project

      - name: docker stop container
        run: |
          if [ $( docker ps -a -q -f name=ecommerce-project) ]; then
             docker stop ecommerce-project
          fi


      - name: docker run new container
        run: |
          source ~/.bashrc
          docker run --rm -it -d \
          -e jwt_secret_key=$jwt_secret_key \
          -e aws_access_key=$aws_access_key \
          -e aws_secret_key=$aws_secret_key \
          -p 8080:8080 \
          --name ecommerce-project ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-project

      - name: delete old docker image
        run: docker system prune -f
